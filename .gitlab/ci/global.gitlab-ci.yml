.default-retry:
  retry:
    max: 2  # This is confusing but this means "3 runs at max".
    when:
      - api_failure
      - data_integrity_failure
      - runner_system_failure
      - scheduler_failure
      - stuck_or_timeout_failure
      - unknown_failure
    # See https://docs.gitlab.com/ee/development/pipelines/internals.html#custom-exit-codes
    exit_codes:
      - 201  # low free disk space

.default-utils-before_script:
  before_script:
    - echo $FOSS_ONLY
    - '[ "$FOSS_ONLY" = "1" ] && rm -rf ee/ qa/spec/ee/ qa/qa/specs/features/ee/ qa/qa/ee/ qa/qa/ee.rb'
    - export GOPATH=$CI_PROJECT_DIR/.go
    - mkdir -p $GOPATH
    - source scripts/utils.sh
    - log_disk_usage "true"  # https://gitlab.com/gitlab-org/gitlab/-/issues/478880

.default-before_script:
  before_script:
    - !reference [.default-utils-before_script, before_script]
    - source scripts/prepare_build.sh

.repo-from-artifacts:
  variables:
    GIT_STRATEGY: "${CI_FETCH_REPO_GIT_STRATEGY}"
  needs:
    # If the job extending this also defines `needs`, make sure to update
    # its `needs` to include `clone-gitlab-repo` because it'll be overridden.
    - job: clone-gitlab-repo
      optional: true  # Optional so easier to switch in between

.production:
  variables:
    RAILS_ENV: "production"
    NODE_ENV: "production"
    GITLAB_ALLOW_SEPARATE_CI_DATABASE: "true"

.cache-analytics:
  after_script:
    - |
      source scripts/utils.sh
      section_start "cache-analytics" "Uploading cache metrics"
      bundle exec ruby scripts/cache_metrics || true
      section_end "cache-analytics"

.redis-services:
  services:
    - name: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images:redis-cluster-${REDIS_CLUSTER_VERSION}
      alias: rediscluster  # configure connections in config/redis.yml
    - name: redis:${REDIS_VERSION}-alpine

.pg-base-variables:
  variables:
    POSTGRES_HOST_AUTH_METHOD: trust

.db-services:
  services:
    - name: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images:postgres-${PG_VERSION}-pgvector-0.4.1
      command: ["postgres", "-c", "fsync=off", "-c", "synchronous_commit=off", "-c", "full_page_writes=off", "-c", "max_locks_per_transaction=256"]
      alias: postgres
    - !reference [.redis-services, services]

.db-services-with-auto-explain:
  services:
    - name: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images:postgres-${PG_VERSION}-pgvector-0.4.1
      command:
        - postgres
        - -c
        - fsync=off
        - -c
        - synchronous_commit=off
        - -c
        - full_page_writes=off
        - -c
        - max_locks_per_transaction=256
        - -c
        - log_filename=pglog
        - -c
        - log_destination=csvlog
        - -c
        - logging_collector=true
        - -c
        - auto_explain.log_min_duration=0
        - -c
        - auto_explain.log_format=json
        - -c
        - auto_explain.log_timing=off
      alias: postgres
    - !reference [.redis-services, services]

.use-pg14:
  extends:
    - .pg-base-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
  variables:
    PG_VERSION: "14"
    REDIS_VERSION: "6.0"
    REDIS_CLUSTER_VERSION: "6.0"

.use-pg15:
  extends:
    - .pg-base-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
  variables:
    PG_VERSION: "15"
    REDIS_VERSION: "7.0"
    REDIS_CLUSTER_VERSION: "7.0.11"

.use-pg16:
  extends:
    - .pg-base-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
  variables:
    PG_VERSION: "16"
    REDIS_VERSION: "7.0"
    REDIS_CLUSTER_VERSION: "7.0.11"

.use-pg17:
  extends:
    - .pg-base-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
  variables:
    PG_VERSION: "17"
    REDIS_VERSION: "7.0"
    REDIS_CLUSTER_VERSION: "7.0.11"

.es7-services:
  services:
    - name: elasticsearch:7.17.6
      command: ["elasticsearch", "-E", "discovery.type=single-node", "-E", "xpack.security.enabled=false", "-E", "cluster.routing.allocation.disk.threshold_enabled=false"]

.use-pg14-es7-ee:
  extends:
    - .use-pg14
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es7-services, services]

.use-pg15-es7-ee:
  extends:
    - .use-pg15
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es7-services, services]

.use-pg16-es7-ee:
  extends:
    - .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es7-services, services]

.use-pg17-es7-ee:
  extends:
    - .use-pg17
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es7-services, services]

.es8-services:
  services:
    - name: elasticsearch:8.17.4

.es8-variables:
  variables:
    ES_SETTING_DISCOVERY_TYPE: "single-node"
    ES_SETTING_XPACK_SECURITY_ENABLED: "false"
    ES_SETTING_CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD__ENABLED: "false"

.use-pg14-es8-ee:
  extends:
    - .use-pg14
    - .es8-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es8-services, services]

.use-pg15-es8-ee:
  extends:
    - .use-pg15
    - .es8-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es8-services, services]

.use-pg16-es8-ee:
  extends:
    - .use-pg16
    - .es8-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es8-services, services]

.use-pg17-es8-ee:
  extends:
    - .use-pg17
    - .es8-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es8-services, services]

.es9-services:
  services:
    - name: elasticsearch:9.0.1

.es9-variables:
  variables:
    ES_SETTING_DISCOVERY_TYPE: "single-node"
    ES_SETTING_XPACK_SECURITY_ENABLED: "false"
    ES_SETTING_CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD__ENABLED: "false"

.use-pg16-es9-ee:
  extends:
    - .use-pg16
    - .es9-variables
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.es9-services, services]

.opensearch-latest-services:
  services:
    - name: opensearchproject/opensearch:latest
      alias: elasticsearch
      command: ["bin/opensearch", "-E", "discovery.type=single-node", "-E", "plugins.security.disabled=true", "-E", "cluster.routing.allocation.disk.threshold_enabled=false"]

.use-pg16-opensearch-latest-ee:
  extends:
    - .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.opensearch-latest-services, services]

.os1-services:
  services:
    - name: opensearchproject/opensearch:1.3.18
      alias: elasticsearch
      command: ["bin/opensearch", "-E", "discovery.type=single-node", "-E", "plugins.security.disabled=true", "-E", "cluster.routing.allocation.disk.threshold_enabled=false"]

.use-pg14-opensearch1-ee:
  extends:
    - .use-pg14
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os1-services, services]

.use-pg15-opensearch1-ee:
  extends:
    - .use-pg15
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os1-services, services]

.use-pg16-opensearch1-ee:
  extends:
    - .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os1-services, services]

.use-pg17-opensearch1-ee:
  extends:
    - .use-pg17
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os1-services, services]

.os2-services:
  services:
    - name: opensearchproject/opensearch:2.15.0
      alias: elasticsearch
      command: ["bin/opensearch", "-E", "discovery.type=single-node", "-E", "plugins.security.disabled=true", "-E", "cluster.routing.allocation.disk.threshold_enabled=false"]

.use-pg14-opensearch2-ee:
  extends:
    - .use-pg14
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os2-services, services]

.use-pg15-opensearch2-ee:
  extends:
    - .use-pg15
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os2-services, services]

.use-pg16-opensearch2-ee:
  extends:
    - .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os2-services, services]

.use-pg17-opensearch2-ee:
  extends:
    - .use-pg17
  services:
    - !reference [.db-services-with-auto-explain, services]
    - !reference [.os2-services, services]

.use-pg16-clickhouse23:
  extends: .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - name: clickhouse/clickhouse-server:23.11.3.23-alpine
      alias: clickhouse
  variables:
    CLICKHOUSE_USER: default
    CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    CLICKHOUSE_DB: gitlab_clickhouse_test

.use-pg16-clickhouse24:
  extends: .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - name: clickhouse/clickhouse-server:24.9.1.3278-alpine
      alias: clickhouse
  variables:
    CLICKHOUSE_USER: default
    CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    CLICKHOUSE_DB: gitlab_clickhouse_test

.use-pg16-clickhouse25:
  extends: .use-pg16
  services:
    - !reference [.db-services-with-auto-explain, services]
    - name: clickhouse/clickhouse-server:25.4-alpine
      alias: clickhouse
  variables:
    CLICKHOUSE_USER: default
    CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    CLICKHOUSE_DB: gitlab_clickhouse_test

.as-if-foss:
  variables:
    FOSS_ONLY: '1'

.use-docker-in-docker:
  image: ${GITLAB_DEPENDENCY_PROXY_ADDRESS}docker:${DOCKER_VERSION}
  services:
    - name: "$GL_DOCKER_REGISTRY_MIRROR/docker:${DOCKER_VERSION}-dind"
      alias: docker
      entrypoint: ["sh", "-c", "dockerd-entrypoint.sh $GL_DOCKER_DIND_OPTIONS"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    GL_DOCKER_REGISTRY_MIRROR: mirror.gcr.io
    GL_DOCKER_REGISTRY_MIRROR_ENDPOINT: https://${GL_DOCKER_REGISTRY_MIRROR}
    GL_DOCKER_DIND_OPTIONS: "--registry-mirror=$GL_DOCKER_REGISTRY_MIRROR_ENDPOINT"
  tags:
    # See https://gitlab.com/gitlab-com/www-gitlab-com/-/issues/7019 for tag descriptions
    - gitlab-org-docker

.buildx-setup:
  before_script:
    - |
      if [ -n "$CI_REGISTRY" ]; then
        echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
      fi
    - |
      if [[ "${ARCH}" =~ arm64 ]]; then
        echo -e "section_start:`date +%s`:emulator_install[collapsed=true]\r\e[0KInstalling latest qemu emulators"
        export QEMU_IMAGE=${QEMU_IMAGE:-tonistiigi/binfmt:qemu-v9.2.2}
        docker pull -q ${QEMU_IMAGE};
        docker run --rm --privileged ${QEMU_IMAGE} --uninstall qemu-*;
        docker run --rm --privileged ${QEMU_IMAGE} --install all;
        echo -e "section_end:`date +%s`:emulator_install\r\e[0K"
      fi
    - docker buildx create --use  # creates and set's to active buildkit builder

.use-buildx:
  extends: .use-docker-in-docker
  image: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images/${BUILD_OS}-${OS_VERSION}-slim:docker-${DOCKER_VERSION}
  before_script:
    - !reference [.default-utils-before_script, before_script]
    - !reference [.buildx-setup, before_script]

.use-kube-context:
  before_script:
    - export KUBE_CONTEXT="${CI_PROJECT_NAMESPACE}/gitlab:review-apps"
    - kubectl config use-context ${KUBE_CONTEXT}

.fast-no-clone-job:
  variables:
    GIT_STRATEGY: none  # We will download the required files for the job from the API
  before_script:
    # Logic taken from scripts/utils.sh in download_files function
    - |
      url="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/files/scripts%2Futils.sh/raw?ref=${CI_COMMIT_SHA}"
      curl -f --header "Private-Token: ${PROJECT_TOKEN_FOR_CI_SCRIPTS_API_USAGE}" "${url}" --create-dirs --output scripts/utils.sh
    - source scripts/utils.sh
    - download_files ${FILES_TO_DOWNLOAD}

.with_secret:
  id_tokens:
    GCP_ID_TOKEN:
      aud: https://iam.googleapis.com/projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_WORKLOAD_IDENTITY_FEDERATION_POOL_ID}/providers/${GCP_WORKLOAD_IDENTITY_FEDERATION_PROVIDER_ID}

# ==================
# Cache definitions
# ==================
.ruby-gems-cache:
  # This key is dynamically overridden in case of rails-next pipelines in order to calculate key checksum
  # based on Gemfile.next.lock instead due to 'files' key not supporting environment variables so variable
  # BUNDLE_GEMFILE can't be used
  #
  # In order to properly merge final CI configuration, !reference has to be used as it is evaluated very last unlike
  # native yaml anchors
  key:
    files:
      - Gemfile.lock
      - Gemfile.checksum
    prefix: "ruby-gems-${BUILD_OS}-${OS_VERSION}-ruby-${RUBY_VERSION}-gemfile-${BUNDLE_GEMFILE}"
  paths:
    - vendor/ruby/
  policy: pull

.gitaly-binaries-cache: &gitaly-binaries-cache
  key:
    files:
      - GITALY_SERVER_VERSION
      - lib/gitlab/setup_helper.rb
    prefix: "gitaly-${BUILD_OS}-${OS_VERSION}"
  paths:
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/_build/bin/
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/config.toml
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/config.toml.transactions
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/gitaly2.config.toml
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/gitaly2.config.toml.transactions
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/internal/
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/Makefile
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/praefect.config.toml
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitaly/praefect-db.config.toml
  policy: pull-push

.node-modules-cache: &node-modules-cache
  key:
    files:
      - yarn.lock
      - scripts/frontend/postinstall.js
    prefix: node-modules-${BUILD_OS}-${OS_VERSION}-${NODE_ENV}-node-${NODE_VERSION}
  paths:
    - node_modules/
  policy: pull

.assets-cache: &assets-cache
  key: "assets-${NODE_ENV}-${BUILD_OS}-${OS_VERSION}-ruby-${RUBY_VERSION}-node-${NODE_VERSION}-vue-${VUE_VERSION}-gemfile-${BUNDLE_GEMFILE}-${GLCI_GITLAB_ASSETS_HASH}"
  paths:
    - app/assets/javascripts/locale/**/app.js
    - public/assets/
    - ${GLCI_GITLAB_ASSETS_HASH_FILE}
  policy: pull-push

# unlike rubocop, webpack cache does not have built in cleanup so it's not safe to use in pull-push configuration
# add periodic cache invalidation based on checksum of config file and dependency lock file until migration to Vite is complete
.assets-tmp-cache: &assets-tmp-cache
  key:
    files:
      - config/webpack.config.js
      - yarn.lock
    prefix: "partial-assets-cache-${NODE_ENV}-${OS_VERSION}-node-${NODE_VERSION}-vue-${VUE_VERSION}-${CI_COMMIT_REF_SLUG}"
  paths:
    - tmp/cache
  policy: pull-push

# used in jobs like gdk:compile-test-assets which is just a copy of compile-test-assets
.assets-cache-pull: &assets-cache-pull
  <<: *assets-cache
  policy: pull

.storybook-node-modules-cache: &storybook-node-modules-cache
  key:
    prefix: "storybook-node-modules-${BUILD_OS}-${OS_VERSION}-${NODE_ENV}"
    files:
      - storybook/yarn.lock
  paths:
    - storybook/node_modules/
  policy: pull

.storybook-node-modules-cache-pull-push: &storybook-node-modules-cache-pull-push
  <<: *storybook-node-modules-cache
  policy: pull-push

.rubocop-cache: &rubocop-cache
  key: "rubocop-${BUILD_OS}-${OS_VERSION}-ruby-${RUBY_VERSION}-gemfile-${BUNDLE_GEMFILE}-${CI_COMMIT_REF_SLUG}"
  paths:
    - tmp/rubocop_cache/
  policy: pull

.rubocop-cache-push: &rubocop-cache-push
  <<: *rubocop-cache
  # We want to rebuild the cache from scratch to ensure stale dependencies are cleaned up but RuboCop has a mechanism
  # for keeping only the N latest cache files, so we take advantage of it with `pull-push`.
  policy: pull-push

.workhorse-cache: &workhorse-cache
  key: "workhorse-${BUILD_OS}-${OS_VERSION}-${GLCI_WORKHORSE_HASH}"
  paths:
    # match only files, otherwise gitlab-workhorse folder changes metadata when recreated on cache restore
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitlab-workhorse/*
  policy: pull-push

.zoekt-elasticsearch-indexer-cache: &zoekt-elasticsearch-indexer-cache
  key:
    prefix: zoekt-elasticsearch-indexer-${BUILD_OS}-${OS_VERSION}
    files:
      - GITLAB_ZOEKT_VERSION
      - GITLAB_ELASTICSEARCH_INDEXER_VERSION
  paths:
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitlab-zoekt/bin
    - ${GLCI_CACHED_SERVICES_FOLDER}/gitlab-elasticsearch-indexer/bin
  policy: pull-push

.ruby-cache:
  cache: !reference [.ruby-gems-cache]

.ruby-cache-pull-push:
  extends: .cache-analytics
  cache:
    key: !reference [.ruby-gems-cache, key]
    paths: !reference [.ruby-gems-cache, paths]
    policy: pull-push

.setup-test-env-cache:
  extends: .cache-analytics
  cache:
    - !reference [.ruby-gems-cache]
    - *gitaly-binaries-cache
    - *workhorse-cache
    - *zoekt-elasticsearch-indexer-cache # gitlab-ci has a limit of max 4 caches, so these binaries are cached together

.static-analysis-cache:
  extends: .cache-analytics
  cache:
    - !reference [.ruby-gems-cache]
    - *node-modules-cache
    - *rubocop-cache

.rubocop-job-cache:
  cache:
    - !reference [.ruby-gems-cache]
    - *rubocop-cache

.rubocop-job-cache-push:
  cache:
    - !reference [.ruby-gems-cache]  # We don't push this cache as it's pushed by `cache:ruby-gems` job
    - *rubocop-cache-push

.ruby-node-cache:
  cache:
    - !reference [.ruby-gems-cache]
    - *node-modules-cache

.workhorse-go-cache: &workhorse-go-cache
  key:
    prefix: workhorse-go-dependencies
    files:
      - workhorse/go.sum
  paths:
    - .go/pkg/mod/
  policy: pull-push

.yarn-cache:
  cache:
    - *node-modules-cache

.yarn-cache-pull-push:
  cache:
    <<: *node-modules-cache
    policy: pull-push

.assets-compile-cache:
  extends: .cache-analytics
  cache:
    - !reference [.ruby-gems-cache]
    - *node-modules-cache
    - *assets-cache
    - *assets-tmp-cache

.assets-compile-cache-pull: # this cache is used only for gdk:compile-test-assets which should only pull, never push
  extends: .cache-analytics
  cache:
    - !reference [.ruby-gems-cache]
    - *node-modules-cache
    - *assets-cache-pull
    - <<: *assets-tmp-cache
      policy: pull

.storybook-yarn-cache:
  cache:
    - *node-modules-cache
    - *storybook-node-modules-cache

.storybook-yarn-cache-pull-push:
  cache:
    - *node-modules-cache
    - *storybook-node-modules-cache-pull-push

.workhorse-job-cache:
  cache:
    - !reference [.ruby-gems-cache]
    - *workhorse-go-cache

.workhorse-job-cache-pull:
  cache:
    - !reference [.ruby-gems-cache]
    - <<: *workhorse-go-cache
      policy: pull

# E2E related gem caching
.qa-bundler-variables: &qa-bundler-variables
  BUNDLE_SUPPRESS_INSTALL_USING_MESSAGES: "true"
  BUNDLE_SILENCE_ROOT_WARNING: "true"
  BUNDLE_PATH: vendor

.qa-ruby-gems-cache: &qa-ruby-gems-cache
  key:
    prefix: "qa-ruby-gems-${BUILD_OS}-${OS_VERSION}-ruby-${RUBY_VERSION}"
    files:
      - qa/Gemfile.lock
  paths:
    - qa/vendor/ruby
  policy: pull

.qa-ruby-orchestrator-gems-cache: &qa-ruby-orchestrator-gems-cache
  key:
    prefix: "qa-orchestrator-ruby-gems-${BUILD_OS}-${OS_VERSION}-ruby-${RUBY_VERSION}"
    files:
      - qa/gems/gitlab-orchestrator/Gemfile.lock
  paths:
    - qa/gems/gitlab-orchestrator/vendor/ruby
  policy: pull

.cng-helm-cache: &cng-helm-cache
  key: cng-helm-cache-${GITLAB_HELM_CHART_REF}
  paths:
    - $CNG_HELM_REPOSITORY_CACHE
  policy: pull

.qa-cache:
  variables: *qa-bundler-variables
  cache:
    - *qa-ruby-gems-cache

.qa-cache-pull-push:
  variables: *qa-bundler-variables
  cache:
    - <<: *qa-ruby-gems-cache
      policy: pull-push

.cng-qa-cache:
  variables:
    CNG_HELM_REPOSITORY_CACHE: $CI_PROJECT_DIR/qa/tmp/helm-cng
    <<: *qa-bundler-variables
  cache:
    - *qa-ruby-gems-cache
    - *cng-helm-cache

.cng-qa-cache-push:
  variables:
    CNG_HELM_REPOSITORY_CACHE: $CI_PROJECT_DIR/qa/tmp/helm-cng
    <<: *qa-bundler-variables
  cache:
    - *qa-ruby-gems-cache
    - <<: *cng-helm-cache
      policy: push

.qa-orchestrator-cache:
  variables: *qa-bundler-variables
  cache:
    - <<: *qa-ruby-orchestrator-gems-cache

.qa-orchestrator-cache-pull-push:
  variables: *qa-bundler-variables
  cache:
    - <<: *qa-ruby-orchestrator-gems-cache
      policy: pull-push
