include:
  - local: .gitlab/ci/rails/shared.gitlab-ci.yml

.db:setup pg16:
  stage: prepare
  needs: []
  extends:
    - .use-pg16
    - .default-before_script
    - .ruby-cache
    - .rails:rules:setup-test-env
  script:
    - source scripts/utils.sh
    # We need bash -c, otherwise, the pg_dumpall.sql file would
    # also contain the output from run_with_custom_exit_code.
    - run_with_custom_exit_code bash -c "pg_dumpall -h postgres -U postgres > pg_dumpall.sql"
  artifacts:
    paths:
      - pg_dumpall.sql

db:setup pg16:
  extends:
    - .db:setup pg16

# Job name is detected in scripts/utils.sh to set up EE-only databases.
db:setup-ee pg16:
  extends:
    - .db:setup pg16
    - .rails:rules:setup-test-env-ee

db:rollback single-db-ci-connection:
  extends:
    - db:rollback
    - .single-db-ci-connection
    - .rails:rules:single-db-ci-connection

db:migrate:reset single-db-ci-connection:
  extends:
    - db:migrate:reset
    - .single-db-ci-connection
    - .rails:rules:single-db-ci-connection

db:check-schema-single-db-ci-connection:
  extends:
    - db:check-schema
    - .single-db-ci-connection
    - .rails:rules:single-db-ci-connection

db:post_deployment_migrations_validator-single-db-ci-connection:
  extends:
    - db:post_deployment_migrations_validator
    - .single-db-ci-connection
    - .rails:rules:db:check-migrations-single-db-ci-connection

db:backup_and_restore single-db-ci-connection:
  extends:
    - db:backup_and_restore
    - .single-db-ci-connection
    - .rails:rules:db-backup

db:rollback single-db-sec-connection:
  extends:
    - db:rollback
    - .single-db-sec-connection
    - .rails:rules:single-db-sec-connection

db:migrate:reset single-db-sec-connection:
  extends:
    - db:migrate:reset
    - .single-db-sec-connection
    - .rails:rules:single-db-sec-connection

db:check-schema-single-db-sec-connection:
  extends:
    - db:check-schema
    - .single-db-sec-connection
    - .rails:rules:single-db-sec-connection

db:post_deployment_migrations_validator-single-db-sec-connection:
  extends:
    - db:post_deployment_migrations_validator
    - .single-db-sec-connection
    - .rails:rules:db:check-migrations-single-db-sec-connection

db:backup_and_restore single-db-sec-connection:
  extends:
    - db:backup_and_restore
    - .single-db-sec-connection
    - .rails:rules:db-backup

db:rollback:
  extends:
    - .db-job-base
    - .rails:rules:db-rollback
  script:
    - |
      function db_rollback() {
        bundle exec rake db:migrate VERSION=20240116205430 # First 16-11-stable-ee migration
        bundle exec rake db:migrate
      }

      run_with_custom_exit_code db_rollback

db:rollback single-db:
  extends:
    - db:rollback
    - .single-db
    - .rails:rules:single-db

# https://docs.gitlab.com/ee/development/database/dbmigrate_multi_version_upgrade_job.html
db:migrate:multi-version-upgrade:
  extends:
    - .single-db
    - .db-job-base
    - .rails:rules:db:migrate:multi-version-upgrade
  variables:
    UPGRADE_STOP_DUMP_URL: "https://gitlab.com/gitlab-org/quality/pg-dump-generator/-/raw/main/pg_dumps/ee/latest_upgrade_stop.gz"
  script:
    - |
      function db_migrate_multi_version_upgrade() {
        curl -o latest_upgrade_stop.gz $UPGRADE_STOP_DUMP_URL
        gunzip -c latest_upgrade_stop.gz > gitlabhq_production
        bundle exec rake db:drop db:create
        apt-get update -qq && apt-get install -y -qq postgresql-client
        psql --output /dev/null -v "ON_ERROR_STOP=1" -h postgres -U postgres -d gitlabhq_test < gitlabhq_production
        bundle exec rake gitlab:db:configure
      }

      run_with_custom_exit_code db_migrate_multi_version_upgrade

# Validate PG version supported by GitLab
db:migrate:multi-version-upgrade-pg17:
  extends:
    - db:migrate:multi-version-upgrade
    - .use-pg17

db:migrate:reset:
  extends: .db-job-base
  script:
    - run_with_custom_exit_code bundle exec rake db:migrate:reset

db:migrate:reset single-db:
  extends:
    - db:migrate:reset
    - .single-db
    - .rails:rules:single-db

db:check-schema:
  extends:
    - .db-job-base
    - .rails:rules:db:check-schema
  script:
    - |
      function db_check_schema() {
        bundle exec rake db:drop db:create db:migrate
        scripts/validate_migration_timestamps
        scripts/validate_migration_checksum
      }

      run_with_custom_exit_code db_check_schema

db:check-schema-single-db:
  extends:
    - db:check-schema
    - .single-db
    - .rails:rules:single-db

db:check-migrations:
  extends:
    - .db-job-base
    - .use-pg16  # Should match the db same version used by GDK
    - .rails:rules:ee-and-foss-mr-with-migration
  script:
    - |
      function db_check_migrations() {
        git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --depth 20
        scripts/validate_migration_schema
      }

      run_with_custom_exit_code db_check_migrations

db:check-migrations-single-db:
  extends:
    - db:check-migrations
    - .single-db
    - .rails:rules:db:check-migrations-single-db

db:post_deployment_migrations_validator:
  extends:
    - .db-job-base
    - .rails:rules:ee-and-foss-mr-with-migration
  script:
    - |
      function db_post_deployment_migrations_validator() {
        git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --depth 20
        scripts/post_deployment_migrations_validator
      }

      run_with_custom_exit_code db_post_deployment_migrations_validator
  allow_failure: true

db:post_deployment_migrations_validator-single-db:
  extends:
    - db:post_deployment_migrations_validator
    - .single-db
    - .rails:rules:db:check-migrations-single-db

db:migrate-non-superuser:
  extends:
    - .db-job-base
    - .rails:rules:ee-and-foss-mr-with-migration
  script:
    - run_with_custom_exit_code bundle exec rake gitlab:db:reset_as_non_superuser

db:gitlabcom-database-testing:
  extends: .rails:rules:db:gitlabcom-database-testing
  stage: test
  image: ${GITLAB_DEPENDENCY_PROXY_ADDRESS}ruby:${RUBY_VERSION}-alpine
  needs: []
  allow_failure: true
  script:
    - source scripts/utils.sh
    - |
      function db_gitlab_com_database_testing() {
        install_gitlab_gem
        ./scripts/trigger-build.rb gitlab-com-database-testing
      }

      run_with_custom_exit_code db_gitlab_com_database_testing

db:backup_and_restore:
  extends:
    - .db-job-base
    - .rails:rules:db-backup
  variables:
    SETUP_DB: "false"
    GITLAB_ASSUME_YES: "1"
  script:
    - |
      function db_back_and_restore() {
        . scripts/prepare_build.sh
        bundle exec rake db:drop db:create db:schema:load db:seed_fu
        mkdir -p tmp/tests/public/uploads tmp/tests/{artifacts,pages,lfs-objects,terraform_state,registry,packages,ci_secure_files,external-diffs}
        bundle exec rake gitlab:backup:create
        date
        bundle exec rake gitlab:backup:restore
      }

      run_with_custom_exit_code db_back_and_restore

db:backup_and_restore single-db:
  extends:
    - db:backup_and_restore
    - .single-db
    - .rails:rules:db-backup

db:rollback geo:
  extends:
    - db:rollback
    - .rails:rules:ee-only-migration
  script:
    - |
      function db_rollback_geo() {
        bundle exec rake db:migrate:geo VERSION=20170627195211
        bundle exec rake db:migrate:geo
      }

      run_with_custom_exit_code db_rollback_geo

db:docs-up-to-date:
  extends:
    - .db-job-base
    - .db:rules:docs-up-to-date
  script:
    - |
      function db_docs_up_to_date() {
        bundle exec rake gitlab:db:dictionary:generate
        git diff --exit-code db/docs
      }

      run_with_custom_exit_code db_docs_up_to_date

db:invalidate-old-pipeline-results:
  extends:
    - .db-job-base
    - .db:rules:invalidate-old-pipeline-results
  stage: post-test
  needs: []
  script:
    - |
      git fetch origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      export MOST_RECENT_COMMIT_TIMESTAMP="$(git log origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME --pretty=format:"%at" | head -n 1)"
      bundle exec ruby scripts/database/mark_pipeline_comments.rb $CI_MERGE_REQUEST_IID $MOST_RECENT_COMMIT_TIMESTAMP
