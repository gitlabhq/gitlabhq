.with-fixtures-needs:
  needs:
    - "rspec-all frontend_fixture"
    - "rspec-all frontend_fixture clickhouse"

.with-graphql-schema-dump-needs:
  needs:
    - "graphql-schema-dump"

.with-ci-node-image:
  image: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images/ci/${BUILD_OS}-${OS_VERSION}-slim-ruby-${RUBY_VERSION}-node-${NODE_VERSION}:rubygems-${RUBYGEMS_VERSION}-git-${GIT_VERSION}-lfs-${LFS_VERSION}-yarn-${YARN_VERSION}-graphicsmagick-${GRAPHICSMAGICK_VERSION}

.compile-assets-base:
  extends:
    - .default-retry
    - .default-before_script
    - .assets-compile-cache
    - .with-ci-node-image
  variables:
    SETUP_DB: "false"
    WEBPACK_VENDOR_DLL: "true"
    # Disable warnings in browserslist which can break on backports
    # https://github.com/browserslist/browserslist/blob/a287ec6/node.js#L367-L384
    BROWSERSLIST_IGNORE_OLD_DATA: "true"
    WEBPACK_COMPILE_LOG_PATH: "tmp/webpack-output.log"
  stage: prepare
  needs: []
  script:
    - run_with_custom_exit_code scripts/compile_assets
    - run_with_custom_exit_code scripts/build_assets_image

.update-cache-base:
  after_script:
    - yarn patch-package --reverse  # To avoid caching patched modules

compile-production-assets:
  image: ${REGISTRY_HOST}/${REGISTRY_GROUP}/gitlab-build-images/ci/${BUILD_OS}-${OS_VERSION}-slim-ruby-${RUBY_VERSION}-node-${NODE_VERSION}:rubygems-${RUBYGEMS_VERSION}-git-${GIT_VERSION}-lfs-${LFS_VERSION}-yarn-${YARN_VERSION}-graphicsmagick-${GRAPHICSMAGICK_VERSION}-docker-${DOCKER_VERSION}
  extends:
    - .use-buildx
    - .compile-assets-base
    - .production
    - .frontend:rules:compile-production-assets
  tags:
    - $GLCI_PRODUCTION_ASSETS_RUNNER_OPTIONAL
  variables:
    GLCI_BUILD_ASSETS_IMAGE: "true"
    GLCI_ASSETS_TAG_ENV_FILE_PATH: "assets-tag-env.env"
    ARCH: linux/amd64,linux/arm64
  before_script:
    - !reference [.compile-assets-base, before_script]
    - !reference [.buildx-setup, before_script]
  after_script:
    - source scripts/utils.sh
    - echo "GLCI_ASSETS_IMAGE_TAG=$(assets_image_tag)" > $GLCI_ASSETS_TAG_ENV_FILE_PATH
  artifacts:
    name: webpack-report
    expire_in: 31d
    paths:
      # These assets are used in:
      # - GitLab UI for integration tests: https://gitlab.com/gitlab-org/gitlab-ui/-/blob/e88493b3c855aea30bf60baee692a64606b0eb1e/.storybook/preview-head.pug#L1
      - cached-assets-hash.txt
      - public/assets/
      - "${WEBPACK_COMPILE_LOG_PATH}"
    when: always
    reports:
      dotenv: $GLCI_ASSETS_TAG_ENV_FILE_PATH

compile-production-assets as-if-foss:
  extends:
    - compile-production-assets
    - .as-if-foss
    - .qa:rules:test-on-omnibus-ce:follow-up

compile-test-assets:
  extends:
    - .compile-assets-base
    - .frontend:rules:compile-test-assets
  artifacts:
    expire_in: 7d
    paths:
      - public/assets/
      - config/helpers/tailwind/  # Assets created during tailwind compilation
      - "${WEBPACK_COMPILE_LOG_PATH}"
    when: always

build-vite-prod:
  extends:
    - .production
    - .default-retry
    - .with-ci-node-image
    - .frontend:rules:compile-production-assets
  artifacts:
    expire_in: 1h
    paths:
      - public/vite-dev/
  stage: prepare
  needs: []
  script:
    - source scripts/utils.sh
    - yarn_install_script
    - yarn vite-prod
  allow_failure: true

gdk:compile-test-assets:
  extends:
    - compile-test-assets
    - .build-images:rules:build-gdk-image

update-assets-compile-production-cache:
  extends:
    - compile-production-assets
    - .update-cache-base
    - .assets-compile-cache-push
    - .shared:rules:update-cache
  artifacts: {}  # This job's purpose is only to update the cache.

update-assets-compile-test-cache:
  extends:
    - compile-test-assets
    - .update-cache-base
    - .assets-compile-cache-push
    - .shared:rules:update-cache
  artifacts: {}  # This job's purpose is only to update the cache.

update-storybook-yarn-cache:
  extends:
    - .default-retry
    - .default-utils-before_script
    - .update-cache-base
    - .storybook-yarn-cache-push
    - .shared:rules:update-cache
  stage: prepare
  script:
    - yarn_install_script_storybook

retrieve-frontend-fixtures:
  variables:
    SETUP_DB: "false"
  extends:
    - .default-retry
    - .frontend:rules:default-frontend-jobs
  stage: prepare
  needs: []
  script:
    - source scripts/utils.sh
    - source scripts/gitlab_component_helpers.sh
    - |
      function retrieve_frontend_fixtures() {
        install_gitlab_gem
        export_fixtures_sha_for_download

        if check_fixtures_download; then
          download_and_extract_fixtures
        fi
      }

      run_with_custom_exit_code retrieve_frontend_fixtures

  artifacts:
    expire_in: 30 days
    paths:
      - tmp/tests/frontend/

# Download fixtures only when a merge request contains changes to only JS files
# and fixtures are present in the package registry.
.frontend-fixtures-base:
  extends:
    - .default-retry
    - .default-before_script
    - .ruby-cache
    - .repo-from-artifacts
  stage: fixtures
  needs:
    - "setup-test-env"
    - "retrieve-tests-metadata"
    - "retrieve-frontend-fixtures"
    - "compile-test-assets"
    # it's ok to wait for the repo artifact as we're waiting for setup-test-env (which takes longer than clone-gitlab-repo) anyway
    - !reference [.repo-from-artifacts, needs]
  variables:
    # Don't add `CRYSTALBALL: "false"` here as we're enabling Crystalball for scheduled pipelines (in `.gitlab-ci.yml`), so that we get coverage data
    # for the `frontend fixture RSpec files` that will be added to the Crystalball mapping in `update-tests-metadata`.
    # More information in https://gitlab.com/gitlab-org/gitlab/-/merge_requests/74003.
    WEBPACK_VENDOR_DLL: "true"
  script:
    - source scripts/gitlab_component_helpers.sh
    - |
      if check_fixtures_reuse; then
        echoinfo "INFO: Reusing frontend fixtures from 'retrieve-frontend-fixtures'."
        exit 0
      fi
    - !reference [.base-script, script]
  artifacts:
    name: frontend-fixtures
    expire_in: 31d
    when: always
    paths:
      - crystalball/
      - knapsack/
      - log/*.log
      - tmp/tests/frontend/

# Builds FOSS, and EE fixtures in the EE project.
# Builds FOSS fixtures in the FOSS project.
rspec-all frontend_fixture:
  extends:
    - .use-pg16
    - .frontend-fixtures-base
    - .frontend:rules:frontend_fixture
  script:
    - !reference [.frontend-fixtures-base, script]
    - run_with_custom_exit_code rspec_parallelized_job "--tag ~click_house"
  parallel: 7

rspec-all frontend_fixture clickhouse:
  extends:
    - .use-pg16-clickhouse25
    - .frontend-fixtures-base
    - .frontend:rules:frontend_fixture
  script:
    - !reference [.clickhouse-setup, script]
    - !reference [.frontend-fixtures-base, script]
    - run_with_custom_exit_code rspec_parallelized_job "--tag click_house"

# Uploads EE fixtures in the EE project.
# Uploads FOSS fixtures in the FOSS project.
upload-frontend-fixtures:
  variables:
    SETUP_DB: "false"
  extends:
    - .default-retry
    - .default-before_script
    - .repo-from-artifacts
    - .frontend:rules:upload-frontend-fixtures
  stage: fixtures
  needs:
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
  script:
    - source scripts/gitlab_component_helpers.sh
    - export_fixtures_sha_for_upload
    - |
      function upload_frontend_fixtures() {
        fixtures_archive_doesnt_exist || { echoinfo "INFO: Exiting early as package exists."; exit 0; }
        create_fixtures_package
        upload_fixtures_package
      }

      run_with_custom_exit_code upload_frontend_fixtures

graphql-schema-dump:
  variables:
    SETUP_DB: "false"
  extends:
    - .default-retry
    - .ruby-cache
    - .default-before_script
    - .frontend:rules:default-frontend-jobs
  stage: fixtures
  needs: []
  script:
    - run_with_custom_exit_code bundle exec rake gitlab:graphql:schema:dump
  artifacts:
    expire_in: 30 days
    name: graphql-schema
    paths:
      - tmp/tests/graphql/gitlab_schema.graphql
      - tmp/tests/graphql/gitlab_schema.json

upload-graphql-schema-dump:
  stage: fixtures
  variables:
    SETUP_DB: "false"
  extends:
    - .default-retry
    - .ruby-cache
    - .default-before_script
    - .frontend:rules:upload-graphql-schema-dump
    - .with-graphql-schema-dump-needs
  script:
    - source scripts/gitlab_component_helpers.sh
    - run_with_custom_exit_code create_and_upload_graphql_schema_package


.frontend-test-base:
  extends:
    - .default-retry
    - .yarn-cache
    - .with-ci-node-image
  variables:
    # Disable warnings in browserslist which can break on backports
    # https://github.com/browserslist/browserslist/blob/a287ec6/node.js#L367-L384
    BROWSERSLIST_IGNORE_OLD_DATA: "true"
    USE_BUNDLE_INSTALL: "false"
    SETUP_DB: "false"
  before_script:
    - !reference [.default-before_script, before_script]
    - yarn_install_script
  stage: test-frontend

jest-build-cache:
  extends:
    - .frontend-test-base
    - .frontend:rules:jest
  needs: []
  artifacts:
    name: jest-cache
    expire_in: 12h
    when: always
    paths:
      - tmp/cache/jest/
  script:
    - scripts/frontend/warm_jest_cache.mjs
  variables:
    # Propagate exit code correctly. See https://gitlab.com/groups/gitlab-org/-/epics/6074.
    FF_USE_NEW_BASH_EVAL_STRATEGY: 'true'
    FORCE_COLOR: '1'
  allow_failure:
    # In merge requests, failures exit with 2, so fail the pipeline. Otherwise,
    # they exit with 1, so as not to break master and other pipelines.
    exit_codes: 1

.vue3:
  variables:
    VUE_VERSION: 3
    NODE_OPTIONS: --max-old-space-size=7680
  allow_failure: true

.with-jest-build-cache-vue3-ensure-compilable-sfcs-needs:
  needs:
    - job: jest-build-cache-vue3-ensure-compilable-sfcs
      optional: true

jest-build-cache-vue3-ensure-compilable-sfcs:
  extends:
    - .vue3
    # Make sure allow_failure is set by jest-build-cache rather than .vue3.
    # Failures should not be allowed in merge requests.
    - jest-build-cache
    - .frontend:rules:jest

jest:
  extends:
    - .frontend-test-base
    - .frontend:rules:jest
  needs:
    - job: jest-build-cache
      optional: true
  artifacts:
    name: coverage-frontend
    expire_in: 31d
    when: always
    paths:
      - coverage-frontend/
      - junit_jest.xml
      - tmp/tests/frontend/
    reports:
      junit: junit_jest.xml
  parallel: 11
  script:
    - run_with_custom_exit_code scripts/frontend/jest_ci.js

jest-with-fixtures:
  extends:
    - jest
    - .repo-from-artifacts
    - .frontend:rules:jest
  needs:
    - !reference [jest, needs]
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
  parallel: 2
  script:
    - run_with_custom_exit_code scripts/frontend/jest_ci.js --fixtures

jest vue3:
  extends:
    - jest
    - .frontend:rules:jest-vue3-nightly
    - .vue3
  needs:
    - !reference [.with-jest-build-cache-vue3-ensure-compilable-sfcs-needs, needs]
  script:
    - scripts/frontend/jest_ci.js --vue3 --include-vue3-quarantined

jest-with-fixtures vue3:
  extends:
    - jest-with-fixtures
    - .frontend:rules:jest-vue3-nightly
    - .vue3
  needs:
    - !reference ["jest vue3", needs]
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
  script:
    - scripts/frontend/jest_ci.js --vue3 --fixtures --include-vue3-quarantined

jest vue3 mr:
  extends:
    - .frontend-test-base
    - .frontend:rules:jest
    - .vue3
  needs:
    - !reference [.with-jest-build-cache-vue3-ensure-compilable-sfcs-needs, needs]
  artifacts:
    name: vue3-mr-junit
    expire_in: 31d
    when: always
    paths:
      - junit_jest.xml
  parallel: 6
  script:
    - run_with_custom_exit_code scripts/frontend/jest_ci.js --vue3
  allow_failure: false

jest-with-fixtures vue3 mr:
  extends:
    - jest vue3 mr
    - .repo-from-artifacts
  needs:
    - !reference [.with-jest-build-cache-vue3-ensure-compilable-sfcs-needs, needs]
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
  artifacts:
    name: vue3-mr-junit
    expire_in: 31d
    when: always
    paths:
      - junit_jest.xml
  parallel: 1
  script:
    - run_with_custom_exit_code scripts/frontend/jest_ci.js --vue3 --fixtures

jest predictive:
  extends:
    - jest
    - .frontend:rules:jest:predictive
  needs:
    - !reference [jest, needs]
    - "detect-tests"
  script:
    - |
      function jest_predictive() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          scripts/frontend/jest_ci.js --predictive
        fi
      }

      run_with_custom_exit_code jest_predictive

  parallel: 4

jest-with-fixtures predictive:
  extends:
    - jest-with-fixtures
    - .frontend:rules:jest:predictive
  needs:
    - !reference [jest-with-fixtures, needs]
    - "detect-tests"
  script:
    - |
      function jest_with_fixtures_predictive() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          scripts/frontend/jest_ci.js --predictive --fixtures
        fi
      }

      run_with_custom_exit_code jest_with_fixtures_predictive

jest vue3 predictive:
  extends:
    - jest vue3 mr
    - .frontend:rules:jest:predictive
  needs:
    - !reference [jest vue3 mr, needs]
    - "detect-tests"
  script:
    - |
      function jest_vue3_predictive() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          scripts/frontend/jest_ci.js --vue3 --predictive
        fi
      }

      run_with_custom_exit_code jest_vue3_predictive

jest-with-fixtures vue3 predictive:
  extends:
    - jest-with-fixtures vue3 mr
    - .frontend:rules:jest:predictive
  needs:
    - !reference [jest-with-fixtures vue3 mr, needs]
    - "detect-tests"
  script:
    - |
      function jest_with_fixtures_vue3_predictive() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          scripts/frontend/jest_ci.js --vue3 --predictive --fixtures;
        fi
      }

      run_with_custom_exit_code jest_with_fixtures_vue3_predictive
  allow_failure: false

jest vue3 check quarantined predictive:
  extends:
    - jest vue3 mr
    - .frontend:rules:jest:predictive
  needs:
    - !reference [jest vue3 mr, needs]
    - "detect-tests"
  script:
    - |
      function jest_vue_check_quarantined_predictive() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          ./scripts/frontend/check_jest_vue3_quarantine.js
        fi
      }

      run_with_custom_exit_code jest_vue_check_quarantined_predictive
  parallel: 4
  artifacts:
    name: quarantined_tests_output
    expire_in: 31d
    when: always
    paths:
      - tmp/tests/frontend/jest_stderr
      - tmp/tests/frontend/jest_results.json

jest-with-fixtures vue3 check quarantined predictive:
  extends:
    - jest vue3 check quarantined predictive
  parallel: 1
  variables:
    JEST_FIXTURE_JOBS_ONLY: 1

jest vue3 check quarantined:
  extends:
    - jest vue3 check quarantined predictive
    - .frontend:rules:jest-vue3-check-quarantined
  parallel: 4
  script:
    - |
      function jest_vue3_check_quarantined() {
        if [[ -s "$RSPEC_CHANGED_FILES_PATH" ]] || [[ -s "$RSPEC_MATCHING_JS_FILES_PATH" ]]; then
          ./scripts/frontend/check_jest_vue3_quarantine.js --all
        fi
      }

      run_with_custom_exit_code jest_vue3_check_quarantined

jest-with-fixtures vue3 check quarantined:
  extends:
    - jest vue3 check quarantined
  parallel: 1
  variables:
    JEST_FIXTURE_JOBS_ONLY: 1

jest-integration:
  extends:
    - .frontend-test-base
    - .repo-from-artifacts
    - .frontend:rules:jest-integration
  script:
    - run_with_custom_exit_code yarn jest:integration --ci
  needs:
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
    - !reference [.with-graphql-schema-dump-needs, needs]

jest-snapshot-vue3:
  extends:
    - .frontend-test-base
    - .repo-from-artifacts
    - .frontend:rules:jest-snapshot-vue3
  needs:
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
  variables:
    VUE_VERSION: 3
    JEST_REPORT: jest-test-report.json
    SNAPSHOT_TEST_REPORT: jest-snapshot-test-report.json
  script:
    - |
      yarn jest:snapshots --ci --json --outputFile="${JEST_REPORT}" || echo 'Proceed to parsing test report...'
      echo $(ruby -rjson -e 'puts JSON.generate(JSON.parse(File.read(ENV["JEST_REPORT"])).dig("snapshot"))') > "${SNAPSHOT_TEST_REPORT}"

      echo " ============= snapshot test report start =============="
      cat "${SNAPSHOT_TEST_REPORT}"
      echo " ============= snapshot test report end ================"

      snapshot_test_failed=$(ruby -rjson -e 'puts JSON.parse(File.read(ENV["SNAPSHOT_TEST_REPORT"])).dig("failure")')
      if [[ "${snapshot_test_failed}" == "true" ]]
      then
        echo "You have failed snapshot tests! Exiting 1..."
        exit 1
      else
        echo 'All snapshot tests passed! Exiting 0...'
        exit 0
      fi
  artifacts:
    name: snapshot_tests
    expire_in: 31d
    when: always
    paths:
      - jest-snapshot-test-match.json
      - jest-snapshot-test-report.json

jest-linters:
  extends:
    - .frontend-test-base
    - .frontend:rules:jest-linters
  needs: []
  script:
    - run_with_custom_exit_code yarn jest:eslint --ci

coverage-frontend:
  extends:
    - .default-retry
    - .default-utils-before_script
    - .yarn-cache
    - .repo-from-artifacts
    - .frontend:rules:coverage-frontend
  needs:
    - !reference [.repo-from-artifacts, needs]
    - job: "jest"
      optional: true
    - job: "jest-with-fixtures"
      optional: true
    - job: "jest predictive"
      optional: true
  stage: post-test
  script:
    - yarn_install_script
    - yarn node scripts/frontend/merge_coverage_frontend.js
    # Removing the individual coverage results, as we just merged them.
    - if ls coverage-frontend/jest-* > /dev/null 2>&1; then
        rm -r coverage-frontend/jest-*;
      fi
  coverage: '/^Statements\s*:\s*?(\d+(?:\.\d+)?)%/'
  artifacts:
    name: coverage-frontend
    expire_in: 31d
    paths:
      - coverage-frontend/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage-frontend/cobertura-coverage.xml

webpack-dev-server:
  extends:
    - .default-retry
    - .default-utils-before_script
    - .yarn-cache
    - .repo-from-artifacts
    - .frontend:rules:default-frontend-jobs
  stage: test-frontend
  variables:
    WEBPACK_MEMORY_TEST: "true"
    WEBPACK_VENDOR_DLL: "true"
  script:
    - yarn_install_script
    - retry yarn webpack-vendor
    - node --expose-gc node_modules/.bin/webpack-dev-server --config config/webpack.config.js
  artifacts:
    name: webpack-dev-server
    expire_in: 31d
    paths:
      - webpack-dev-server.json

compile-storybook:
  extends:
    - .frontend-test-base
    - .storybook-yarn-cache
    - .repo-from-artifacts
    - .frontend:rules:compile-storybook
  stage: pages
  needs:
    # it's ok to wait for the repo artifact as we're waiting for the fixtures (which wait for the repo artifact) anyway
    - !reference [.repo-from-artifacts, needs]
    - !reference [.with-fixtures-needs, needs]
    - !reference [.with-graphql-schema-dump-needs, needs]
  artifacts:
    name: storybook
    expire_in: 31d
    when: always
    paths:
      - storybook/public
  script:
    - yarn_install_script_storybook
    - yarn run storybook:build
