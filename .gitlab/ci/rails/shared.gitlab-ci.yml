include:
  - local: .gitlab/ci/global.gitlab-ci.yml
  - local: .gitlab/ci/rules.gitlab-ci.yml

.rules:dont-interrupt:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      allow_failure: true
    - if: $CI_MERGE_REQUEST_IID
      when: manual
      allow_failure: true

#######################
# rspec job base specs
.rails-job-base:
  extends:
    - .default-retry
    - .default-before_script
    - .ruby-cache

.base-script:
  script:
    - source ./scripts/rspec_helpers.sh
    # Only install knapsack after bundle install! Otherwise oddly some native
    # gems could not be found under some circumstance. No idea why, hours wasted.
    - gem install knapsack --no-document
    - section_start "gitaly-test-spawn" "Spawning Gitaly"; scripts/gitaly-test-spawn; section_end "gitaly-test-spawn"  # Do not use 'bundle exec' here
    - export RSPEC_SKIPPED_TESTS_REPORT_PATH="rspec/skipped_tests-${CI_JOB_ID}.txt"
    - export RSPEC_RETRIED_TESTS_REPORT_PATH="rspec/retried_tests-${CI_JOB_ID}.txt"
    - tooling/bin/create_job_metrics_file || true

.no-redis-cluster:
  variables:
    USE_REDIS_CLUSTER: "false"

.clickhouse-setup:
  script:
    - !reference [.base-script, script]
    - cp config/click_house.yml.example config/click_house.yml
    - 'sed -i "s|url:.*$|url: http://clickhouse:8123|g" config/click_house.yml'

.single-db:
  variables:
    DECOMPOSED_DB: "false"

.single-db-ci-connection:
  extends: .single-db
  variables:
    CI_CONNECTION_DB: "true"

.single-db-sec-connection:
  extends: .single-db
  variables:
    SEC_CONNECTION_DB: "true"

.single-db-rspec:
  extends: .single-db

.single-db-ci-connection-rspec:
  extends: .single-db-ci-connection

.single-db-sec-connection-rspec:
  extends: .single-db-sec-connection

.praefect-with-db:
  variables:
    GITALY_PRAEFECT_WITH_DB: '1'

.gitaly-with-transactions:
  variables:
    GITALY_TRANSACTIONS_ENABLED: "true"

.gitaly-without-transactions:
  extends:
    - .rails:rules:gitaly-without-transactions
  variables:
    GITALY_TRANSACTIONS_ENABLED: "false"

.ee-only-gitaly-without-transactions:
  extends:
    - .rails:rules:ee-only-gitaly-without-transactions
  variables:
    GITALY_TRANSACTIONS_ENABLED: "false"

.rspec-base-needs:
  needs:
    - !reference [.repo-from-artifacts, needs]
    - job: "setup-test-env"
    - job: "retrieve-tests-metadata"
    - job: "compile-test-assets"

.rspec-base:
  extends:
    - .rails-job-base
    - .base-artifacts
    - .repo-from-artifacts
    - .gitaly-with-transactions
  stage: test
  variables:
    RUBY_GC_MALLOC_LIMIT: 67108864
    RUBY_GC_MALLOC_LIMIT_MAX: 134217728
    RECORD_DEPRECATIONS: "true"
    GEO_SECONDARY_PROXY: 0
    SUCCESSFULLY_RETRIED_TEST_EXIT_CODE: 137
    EVENT_PROF: "sql.active_record"
  needs:
    - !reference [.rspec-base-needs, needs]
    - job: "detect-tests"
      optional: true
  script:
    - !reference [.base-script, script]
    # We need to exclude background migration because unit tests run with
    # spec/lib, yet background migration tests are also sitting there,
    # and they should run on their own jobs so we don't need to run them
    # in unit tests again.
    - rspec_section rspec_parallelized_job "--fail-fast=${RSPEC_FAIL_FAST_THRESHOLD} --tag ~quarantine --tag ~level:background_migration --tag ~click_house"
  after_script:
    # We need this at the very top, because the section_start/section_end logic is defined there.
    - source scripts/utils.sh
    - log_disk_usage  # https://gitlab.com/gitlab-org/gitlab/-/issues/478880
    - bundle exec gem list gitlab_quality-test_tooling
    - |
      section_start "failed-test-issues" "Report test failures"
      if [[ -n "$TEST_FAILURES_PROJECT_TOKEN" ]]; then
        input_file="rspec/rspec-${CI_JOB_ID}.json"

        # The actual failures will always be part of the retry report
        if [ -f "rspec/rspec-retry-${CI_JOB_ID}.json" ]; then
          input_file="rspec/rspec-retry-${CI_JOB_ID}.json"
        fi

        cmd_args=()
        cmd_args+=(--token "${TEST_FAILURES_PROJECT_TOKEN}")
        cmd_args+=(--project "gitlab-org/gitlab")
        cmd_args+=(--input-files "${input_file}")
        cmd_args+=(--exclude-labels-for-search "QA,knapsack_report")
        cmd_args+=(--related-issues-file "rspec/${CI_JOB_ID}-failed-test-issues.json")

        if [[ "$CREATE_RAILS_TEST_FAILURE_ISSUES" != "true" ]]; then
          cmd_args+=(--enable-issue-update false)
          echoinfo "Disabling issue creation because \$CREATE_RAILS_TEST_FAILURE_ISSUES != 'true'"
        fi

        if [[ "$GLCI_PUSH_RAILS_TEST_FAILURE_ISSUES_TO_GCS" == "true" ]]; then
          if [[ -n "$GLCI_FAILED_TESTS_GCS_PROJECT_ID" && -n "$GLCI_FAILED_TESTS_GCS_BUCKET" && -n "$GLCI_FAILED_TESTS_GCS_CREDENTIALS_FILE" ]]; then
            cmd_args+=(--enable-gcs true)
            cmd_args+=(--gcs-project-id "$GLCI_FAILED_TESTS_GCS_PROJECT_ID")
            cmd_args+=(--gcs-bucket "$GLCI_FAILED_TESTS_GCS_BUCKET")
            cmd_args+=(--gcs-credentials "$GLCI_FAILED_TESTS_GCS_CREDENTIALS_FILE")
          else
            echoerr "Skipping GCS push because one or more GLCI_FAILED_TESTS_* environment variables are not set"
          fi
        else
          echoinfo "Skipping GCS push because \$GLCI_PUSH_RAILS_TEST_FAILURE_ISSUES_TO_GCS != 'true'"
        fi

        # Execute command with all arguments
        bundle exec failed-test-issues "${cmd_args[@]}"
      else
        echoinfo "Not reporting test failures because TEST_FAILURES_PROJECT_TOKEN is not set"
      fi
      section_end "failed-test-issues"
    - |
      section_start "flaky-test-issues" "Report test flakiness"
      if [[ "$CREATE_RAILS_FLAKY_TEST_ISSUES" == "true" ]] && [[ -n "$TEST_FAILURES_PROJECT_TOKEN" ]]; then
        if [ -f "rspec/rspec-retry-${CI_JOB_ID}.json" ]; then
          bundle exec flaky-test-issues \
            --token "${TEST_FAILURES_PROJECT_TOKEN}" \
            --project "gitlab-org/gitlab" \
            --input-files "rspec/rspec-retry-${CI_JOB_ID}.json";
        else
          echoerr "Not reporting test flakiness because 'rspec/rspec-retry-${CI_JOB_ID}.json' is missing!"
        fi
      else
        echoinfo "Not reporting test flakiness because \$CREATE_RAILS_FLAKY_TEST_ISSUES != 'true' or TEST_FAILURES_PROJECT_TOKEN is not set"
      fi
      section_end "flaky-test-issues"
    - |
      section_start "slow-test-issues" "Report test slowness"
      if [[ "$CREATE_RAILS_SLOW_TEST_ISSUES" == "true" ]] && [[ -n "$TEST_FAILURES_PROJECT_TOKEN" ]]; then
        bundle exec slow-test-issues \
          --token "${TEST_FAILURES_PROJECT_TOKEN}" \
          --project "gitlab-org/gitlab" \
          --input-files "rspec/rspec-*.json" \
          --related-issues-file "rspec/${CI_JOB_ID}-slow-test-issues.json";
      else
        echoinfo "Not reporting test slowness because \$CREATE_RAILS_SLOW_TEST_ISSUES != 'true' or TEST_FAILURES_PROJECT_TOKEN is not set"
      fi
      section_end "slow-test-issues"
    - |
      section_start "slow-test-merge-request-report-note" "Report test slowness in MR note"
      if [[ "$ADD_SLOW_TEST_NOTE_TO_MERGE_REQUEST" == "true" ]] && [[ -n "$TEST_SLOW_NOTE_PROJECT_TOKEN" ]]; then
        bundle exec slow-test-merge-request-report-note \
          --token "${TEST_SLOW_NOTE_PROJECT_TOKEN}" \
          --project "gitlab-org/gitlab" \
          --input-files "rspec/rspec-*.json" \
          --merge_request_iid "$CI_MERGE_REQUEST_IID";
      else
        echoinfo "Not reporting test slowness in MR note because \$ADD_SLOW_TEST_NOTE_TO_MERGE_REQUEST != 'true' or TEST_SLOW_NOTE_PROJECT_TOKEN is not set"
      fi
      section_end "slow-test-merge-request-report-note"
    - |
      section_start "knapsack-report-issues" "Report test files close to timing out"
      if [[ "$ALLOW_KNAPSACK_REPORT_CREATE_ISSUES" == "true" ]] && [[ -n "$KNAPSACK_REPORT_ISSUES_PROJECT_TOKEN" ]]; then
        bundle exec knapsack-report-issues \
          --token "${KNAPSACK_REPORT_ISSUES_PROJECT_TOKEN}" \
          --project "gitlab-org/gitlab" \
          --input-file knapsack/rspec*_report.json \
          --expected-report knapsack/node_specs_expected_duration.json;
      else
        echoinfo "Not reporting test files close to timing out because \$ALLOW_KNAPSACK_REPORT_CREATE_ISSUES != 'true' or KNAPSACK_REPORT_ISSUES_PROJECT_TOKEN is not set"
      fi
      section_end "knapsack-report-issues"
    - tooling/bin/push_job_metrics || true
    - scripts/minify-simplecov-resultsets.rb

.base-artifacts:
  artifacts:
    expire_in: 31d
    when: always
    paths:
      - auto_explain/
      - coverage/
      - crystalball/
      - deprecations/
      - knapsack/
      - rspec/
      - tmp/capybara/
      - log/*.log
    reports:
      junit: "rspec/rspec-*.xml"

.rspec-base-migration:
  script:
    - !reference [.base-script, script]
    - rspec_section rspec_parallelized_job "--fail-fast=${RSPEC_FAIL_FAST_THRESHOLD} --tag ~quarantine --tag ~zoekt --tag ~click_house"
  after_script:
    - !reference [.rspec-base, after_script]

# Current PG version for CI
.rspec-base-pg16:
  needs:
    - !reference [.rspec-base, needs]
    - job: "db:setup pg16"
      optional: true
  extends:
    - .rspec-base
    - .use-pg16

.rspec-base-pg16-clickhouse23:
  extends:
    - .rspec-base
    - .use-pg16-clickhouse23
  script:
    - !reference [.clickhouse-setup, script]
    - rspec_section rspec_parallelized_job "--fail-fast=${RSPEC_FAIL_FAST_THRESHOLD} --tag click_house"

.rspec-base-pg16-clickhouse24:
  extends:
    - .rspec-base
    - .use-pg16-clickhouse24
  script:
    - !reference [.clickhouse-setup, script]
    - rspec_section rspec_parallelized_job "--fail-fast=${RSPEC_FAIL_FAST_THRESHOLD} --tag click_house"

.rspec-base-pg16-clickhouse25:
  extends:
    - .rspec-base
    - .use-pg16-clickhouse25
  script:
    - !reference [.clickhouse-setup, script]
    - rspec_section rspec_parallelized_job "--fail-fast=${RSPEC_FAIL_FAST_THRESHOLD} --tag click_house"

.rspec-base-pg14:
  extends:
    - .rspec-base
    - .use-pg14

.rspec-base-pg15:
  extends:
    - .rspec-base
    - .use-pg15

.rspec-base-pg17:
  extends:
    - .rspec-base
    - .use-pg17

.rspec-ee-base-pg14:
  extends:
    - .rspec-base
    - .use-pg14-es7-ee

.rspec-ee-base-pg15:
  extends:
    - .rspec-base
    - .use-pg15-es7-ee

.rspec-ee-base-pg16:
  needs:
    - !reference [.rspec-base, needs]
    - job: "db:setup-ee pg16"
      optional: true
  extends:
    - .rspec-base
    - .use-pg16-es7-ee

.rspec-ee-base-pg16-es8:
  extends:
    - .rspec-base
    - .use-pg16-es8-ee
    - .rails:rules:run-search-tests

.rspec-ee-base-pg16-es9:
  extends:
    - .rspec-base
    - .use-pg16-es9-ee

.rspec-ee-base-pg16-opensearch-latest:
  extends:
    - .rspec-base
    - .use-pg16-opensearch-latest-ee

.rspec-ee-base-pg16-opensearch1:
  extends:
    - .rspec-base
    - .use-pg16-opensearch1-ee
    - .rails:rules:run-search-tests

.rspec-ee-base-pg16-opensearch2:
  extends:
    - .rspec-base
    - .use-pg16-opensearch2-ee
    - .rails:rules:run-search-tests

.rspec-ee-base-pg17:
  extends:
    - .rspec-base
    - .use-pg17-es7-ee

.ci-config-validation-base:
  extends:
    - .rspec-base-pg16
    - .rails:rules:rspec-ci-config-validation
  stage: test
  after_script: []  # override after_script from .rspec-base

.db-job-base:
  extends:
    - .rails-job-base
    - .rails:rules:ee-and-foss-migration
    - .use-pg16
  stage: test
  needs: ["setup-test-env"]
# rspec job base specs
######################

############################
# rspec job parallel configs
# Adjusting these parallel job counts has an impact on the
# rspec:artifact-collector jobs in .gitlab/ci/rails.gitlab-ci.yml
# Please double-check and adjust accordingly. At the moment,
# each job can only have needs from up to 50 jobs.
#
# To calculate the number of jobs we need for each RSpec, follow this formula:
#
#     parallel_job_count = ceil(current_job_count * (average_duration / target_duration))
#
# Here's an example in Ruby:
#
#     current_job_count = 10
#     average_duration  = 53
#     target_duration   = 30
#
#     parallel_job_count = (current_job_count.to_f * (average_duration.to_f / target_duration.to_f)).ceil
#
#     => To reach 30min target duration, we would need 18 parallel jobs instead of 10.
#
# At the moment, we set the target to 30 minutes
#
# https://app.snowflake.com/ys68254/gitlab/w2woEkSvsfYa/chart
.rspec-migration-parallel:
  parallel: 26

# https://app.snowflake.com/ys68254/gitlab/wpUmrAF0RJL/chart
#
# Please set back to around 10 once https://gitlab.com/gitlab-org/gitlab/-/issues/503221 is closed
.rspec-background-migration-parallel:
  parallel: 17

# https://app.snowflake.com/ys68254/gitlab/w4cxPH8ySQlP/chart
.rspec-ee-migration-parallel:
  parallel: 2

# https://app.snowflake.com/ys68254/gitlab/w20QT8KSVZAi/chart
.rspec-ee-background-migration-parallel:
  parallel: 3

# https://app.snowflake.com/ys68254/gitlab/w1tkkoZAXSsZ/chart
.rspec-unit-parallel:
  parallel: 44

# https://app.snowflake.com/ys68254/gitlab/w2GlD4YqHSbO/chart
.rspec-ee-unit-parallel:
  parallel: 39

# https://app.snowflake.com/ys68254/gitlab/w56UXaCA4xkG/chart
.rspec-integration-parallel:
  parallel: 20

# https://app.snowflake.com/ys68254/gitlab/w4tXhUkSsFj/chart
.rspec-ee-integration-parallel:
  parallel: 9

# https://app.snowflake.com/ys68254/gitlab/w3Y3rkdbS25v/chart
.rspec-system-parallel:
  parallel: 32

# https://app.snowflake.com/ys68254/gitlab/w4zGboX1YRrY/chart
.rspec-ee-system-parallel:
  parallel: 16
