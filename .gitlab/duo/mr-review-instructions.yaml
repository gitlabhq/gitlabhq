---
# Custom instructions for GitLab Duo Code Review
# Based on GitLab's official code review guidelines

# References:
# - Code Review Guidelines: https://docs.gitlab.com/development/code_review/
# - Databse Review Guidelines: https://docs.gitlab.com/development/database_review/
# - Developer Guide: https://docs.gitlab.com/operator/developer/guide/
# - Contributing Guide: https://docs.gitlab.com/development/contributing/

# This file defines custom review criteria that will be applied to specific files
# during merge request reviews. Instructions are grouped by name and can target
# multiple file patterns using glob syntax.

instructions:
  - name: Ruby Code Quality
    fileFilters:
      - "**/*.rb"
      - "!spec/**/*"
    instructions: |
      1. Check for N+1 queries - ensure use of `includes()`, `preload()`, or `eager_load()` when accessing associations
      2. Ensure `update_all`, `delete_all`, `destroy_all` have proper conditions
      3. Ensure authorization checks in controller actions and API endpoints
      4. Ensure input validation for user-provided parameters
      5. Ensure no information disclosure in error responses

  - name: Database Migrations
    fileFilters:
      - "db/migrate/**/*.rb"
      - "db/post_migrate/**/*.rb"
      - "ee/db/geo/migrate/**/*.rb"
      - "lib/gitlab/background_migration/**/*.rb"
    instructions: |
      1. Ensure migrations are reversible (add explicit down method for complex operations)
      2. Ensure bulk operations use batched migrations
      3. Use post-migrations for time-consuming operations
      4. Ensure indexes on new foreign key columns
      5. Ensure column removals were ignored in previous release
      6. Update db/structure.sql and Database Dictionary

  - name: Test Coverage
    fileFilters:
      - "spec/**/*_spec.rb"
      - "ee/spec/**/*_spec.rb"
      - "!spec/factories/**/*"
      - "!spec/support/**/*"
    instructions: |
      1. Use shared examples to reduce duplication
      2. Ensure error handling tests for security-sensitive operations
      3. Ensure input validation tests for user-facing endpoints
