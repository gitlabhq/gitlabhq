# alt_document_root = '/home/git/public/assets'
# shutdown_timeout = "60s"
# trusted_cidrs_for_x_forwarded_for = []
# trusted_cidrs_for_propagation = []

[redis]
URL = "unix:/home/git/gitlab/redis/redis.socket"

[object_storage]
  provider = "AWS" # Allowed options: AWS, AzureRM, Google

[object_storage.s3]
  aws_access_key_id = "YOUR AWS ACCESS KEY"
  aws_secret_access_key = "YOUR AWS SECRET ACCESS KEY"

[object_storage.azurerm]
  azure_storage_account_name = "YOUR ACCOUNT NAME"
  azure_storage_access_key = "YOUR ACCOUNT KEY"

[object_storage.google]
  google_application_default = true #Â if the application default should be used
  google_json_key_string = '''
  JSON KEY STRING
  '''
  google_json_key_location = "PATH TO JSON KEY FILE"

[metadata]
  zip_reader_limit_bytes = 104857600

[image_resizer]
  max_scaler_procs = 4 # Recommendation: CPUs / 2
  max_filesize = 250000

[[listeners]]
  network = "tcp"
  addr = "127.0.0.1:3443"

[listeners.tls]
  certificate = "/path/to/certificate"
  key = "/path/to/private/key"
  min_version = "tls1.2"
  max_version = "tls1.3"

[circuit_breaker]
  enabled = true
  timeout = 60
  interval = 180
  max_requests = 1
  consecutive_failures = 5

# Health check listener configuration
# Enables a dedicated health check endpoint for readiness probes
[health_check_listener]
  # Network type for the health check listener (tcp, tcp4, tcp6, unix)
  network = "tcp"
  # Address to bind the health check server to
  addr = "localhost:8182"

  # URL to check Puma's readiness endpoint
  # Readiness indicates if the service is ready to accept traffic
  # If not specified, authBackend + /-/readiness is used.
  readiness_probe_url = "http://localhost:8080/-/readiness"

  # Optional: URL to check Puma's control server for readiness checks
  # Uncomment to enable control server checks
  # puma_control_url = "http://localhost:9293"

  # How often to perform health checks
  check_interval = "10s"

  # Timeout for individual health check requests
  timeout = "5s"

  # How long to remain not ready after receiving shutdown signal
  # This allows load balancers to drain traffic before shutdown
  graceful_shutdown_delay = "10s"

  # Number of consecutive failures before marking as not ready (readiness only)
  max_consecutive_failures = 1

  # Number of consecutive successes required to become ready (readiness only)
  min_successful_probes = 1
