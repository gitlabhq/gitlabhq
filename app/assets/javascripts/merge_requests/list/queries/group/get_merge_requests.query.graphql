#import "~/graphql_shared/fragments/page_info.fragment.graphql"
#import "../merge_request.fragment.graphql"

query getGroupMergeRequests(
  $hideUsers: Boolean = false
  $isSignedIn: Boolean = false
  $fullPath: ID!
  $sort: MergeRequestSort
  $state: MergeRequestState
  $search: String
  $in: [IssuableSearchableField!]
  $approvedBy: [String!]
  $assigneeUsernames: String
  $assigneeWildcardId: AssigneeWildcardId
  $reviewerUsername: String
  $reviewerWildcardId: ReviewerWildcardId
  $authorUsername: String
  $draft: Boolean
  $labelName: [String!]
  $releaseTag: String
  $mergeUser: String
  $milestoneTitle: String
  $milestoneWildcardId: MilestoneWildcardId
  $myReactionEmoji: String
  $sourceBranches: [String!]
  $targetBranches: [String!]
  $deployedBefore: Time
  $deployedAfter: Time
  $environmentName: String
  $subscribed: SubscriptionStatus
  $not: MergeRequestsResolverNegatedParams
  $beforeCursor: String
  $afterCursor: String
  $firstPageSize: Int
  $lastPageSize: Int
) {
  namespace: group(fullPath: $fullPath) {
    id
    mergeRequests(
      sort: $sort
      state: $state
      search: $search
      in: $in
      approvedBy: $approvedBy
      assigneeUsername: $assigneeUsernames
      assigneeWildcardId: $assigneeWildcardId
      reviewerUsername: $reviewerUsername
      reviewerWildcardId: $reviewerWildcardId
      authorUsername: $authorUsername
      draft: $draft
      labelName: $labelName
      releaseTag: $releaseTag
      mergedBy: $mergeUser
      milestoneTitle: $milestoneTitle
      milestoneWildcardId: $milestoneWildcardId
      myReactionEmoji: $myReactionEmoji
      sourceBranches: $sourceBranches
      targetBranches: $targetBranches
      deployedBefore: $deployedBefore
      deployedAfter: $deployedAfter
      environmentName: $environmentName
      subscribed: $subscribed
      not: $not
      includeSubgroups: true
      before: $beforeCursor
      after: $afterCursor
      first: $firstPageSize
      last: $lastPageSize
    ) {
      pageInfo {
        ...PageInfo
      }
      nodes {
        ...MergeRequestFragment
        reference(full: true)
        # This data gets loaded through the `mergeRequestApprovals` request,
        # we are doing it this way to combat timeouts with the approval
        # data causing the whole merge request list to not render
        approved @client
        approvedBy @client {
          nodes {
            id
          }
        }
      }
    }
  }
}
